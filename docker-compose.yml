version: '3'
services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password

  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb-data:/data/db

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: desd
    volumes:
      - postgres-data:/var/lib/postgresql/data

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "5000:5000"
    environment:
      FLASK_ENV: development
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: user
      RABBITMQ_PASS: password
      MONGO_URI: mongodb://root:example@mongodb:27017
      POSTGRES_URI: postgresql://user:password@postgres:5432/tasks
      CONVERTER_GRPC_HOST: converter:50051
      FLASK_SECRET_KEY: 4be374c60625b60ad3b571364d925c8a1191b4614844eb5137acd4b24275fa29
      JWT_SECRET_KEY: e52a1f926d451902e2a60d5e5bfe0a6667294b76f1585e86394d670cf8ac27fc
    volumes:
      - shared-data:/shared-data  # Montar el volumen compartido
    depends_on:
      - rabbitmq
      - mongodb
      - postgres
      - converter
      - worker_cude
      - worker_rode

  converter:
    build:
      context: .
      dockerfile: Dockerfile.converter
    ports:
      - "50051:50051"

  worker_cude:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: user
      RABBITMQ_PASS: password
      MONGO_URI: mongodb://root:example@mongodb:27017
      QUEUE_NAME: queue_cude
      MODEL_ONNX_PATH: /models/cude_v2.onnx
      MODEL_OPENVINO_PATH: /models/cude_v2.xml
    volumes:
      - ./models/cude/:/models/
      - shared-data:/shared-data  # Montar el volumen compartido
    depends_on:
      - rabbitmq
      - mongodb

  worker_rode:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: user
      RABBITMQ_PASS: password
      MONGO_URI: mongodb://root:example@mongodb:27017
      QUEUE_NAME: queue_rode
      MODEL_ONNX_PATH: /models/rode_v2.onnx
      MODEL_OPENVINO_PATH: /models/rode_v2.xml
    volumes:
      - ./models/rode/:/models/
      - shared-data:/shared-data  # Montar el volumen compartido
    depends_on:
      - rabbitmq
      - mongodb

  worker_legibility:
    build: 
      context: .
      dockerfile: Dockerfile.worker
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: user
      RABBITMQ_PASS: password
      MONGO_URI: mongodb://root:example@mongodb:27017
      QUEUE_NAME: queue_legibility
      MODEL_ONNX_PATH: /models/legibility_v1.onnx
      MODEL_OPENVINO_PATH: /models/legibility_v1.xml
    volumes:
      - ./models/legibility/:/models/
      - shared-data:/shared-data  # Montar el volumen compartido
    depends_on:
      - rabbitmq
      - mongodb

  worker_tilde:
    build: 
      context: .
      dockerfile: Dockerfile.worker
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: user
      RABBITMQ_PASS: password
      MONGO_URI: mongodb://root:example@mongodb:27017
      QUEUE_NAME: queue_tilde
      MODEL_ONNX_PATH: /models/tilde_v1.onnx
      MODEL_OPENVINO_PATH: /models/tilde_v1.xml
    volumes:
      - ./models/tilde/:/models/
      - shared-data:/shared-data  # Montar el volumen compartido
    depends_on:
      - rabbitmq
      - mongodb

volumes:
  shared-data:
  postgres-data:
  mongodb-data: